<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">


	<http auto-config="false" use-expressions="true">

		<!-- 모든 url 패턴에 ROLE_USER의 권한을 가지고 있을때만 접근가능 -->
		<!-- <intercept-url pattern="/**" access="hasRole('ROLE_USER')" /> -->
		<!-- <intercept-url pattern="/userPage/**" access="hasRole('ROLE_USER')" 
			/> -->
		<intercept-url pattern="/**" access="permitAll" />

		<!-- jwt로그인 위한 주석처리 -->
		<!-- <custom-filter before="FORM_LOGIN_FILTER" ref="authenticationFilter" 
			/> -->

		<custom-filter before="FORM_LOGIN_FILTER"
			ref="loginJwtFilter" />

		<!-- <custom-filter before="LOGOUT_FILTER" ref="jwtlogoutFilter" /> -->


<!-- 시큐리티 선봉대장   CHANNEL_FILTER ChannelProcessingFilter 라는 것이 있는데 
before="FIRST" ref="구현 필터" 를 하면 항상 먼저 타게 된다. 즉 모든 요청에 대하여 먼저 타게 된다.
즉 아래처럼 해도 된다.
<security:custom-filter before="CHANNEL_FILTER" ref="customFilter"/>
 -->
		<custom-filter before="FIRST"
			ref="jwtAuthorizationFilter" />

		<csrf disabled="true" />
		<form-login username-parameter="loginId"
			password-parameter="loginPwd" login-processing-url="/logingo.do"
			login-page="/loginfom.do" default-target-url="/loginfom.do" />
		<logout logout-url="/securitylogout.do"
			success-handler-ref="securityLogoutSuccessHandler" />

	</http>


	<!-- 로그인 검증할 매니져를 만든다. -->
	<authentication-manager
		alias="authenticationManager">
		<authentication-provider
			ref="adminAuthenticationProvider" />
	</authentication-manager>

	<beans:bean id="adminAuthenticationProvider"
		class="com.spring.finall.security.AdminAuthenticationProvider" />

	<beans:bean id="userService"
		class="com.spring.finall.security.CustomUserDetailsService" />
	<beans:bean id="userAuthProvider"
		class="com.spring.finall.security.CustomAuthenticationProvider" />

	<!-- 검증 성공후 처리할 핸들러 하 씨발 -->
	<beans:bean id="successHandler"
		class="com.spring.finall.security.LoginSuccessHandler" />
	<beans:bean id="failHandler"
		class="com.spring.finall.security.LoginFailureHandle" />


	<!-- 이제부턴 jwt 필터를 등록해서 로그인 -->
	<beans:bean id="loginJwtFilter"
		class="com.spring.finall.jwt.JwtLoginFilter"
		p:authenticationManager-ref="authenticationManager"
		p:authenticationSuccessHandler-ref="successHandler"
		p:authenticationFailureHandler-ref="failHandler" />

	<!-- 이건 jwt 인증(로그인아님!) 을 위한 필터 등록이다. 또한 팩트로 확인했던것처럼 스프링 프레임워크 제공 필터는 매니져 
		등록할필요 없음 에러 안남 -->
	<beans:bean id="jwtAuthorizationFilter"
		class="com.spring.finall.jwt.JwtAuthorizationFilter"></beans:bean>

	<beans:bean id="JWTUtil"
		class="com.spring.finall.jwt.JWTUtil">
		<beans:constructor-arg name="secret"
			value="hsdfjksdfhjksdfdsfdsfhjkdsfddsfsdf" />
	</beans:bean>


	<beans:bean id="jwtlogoutFilter"
		class="com.spring.finall.jwt.JwtLogoutFilter" />
	<beans:bean id="securitylogouthandler"
		class="com.spring.finall.security.SecurityLogoutHandler"></beans:bean>
	<beans:bean id="securityLogoutSuccessHandler"
		class="com.spring.finall.security.SecurityLogoutSuccessHandler"></beans:bean>


</beans:beans>
