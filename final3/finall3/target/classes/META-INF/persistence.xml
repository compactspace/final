<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
	version="2.1">
	<persistence-unit name="jpa-maria">
		<properties>
			<!-- 이거는 나중에 xml bean등록시나 그런 조합에 쓰임 -->
			<!-- <property name="javax.persistence.jdbc.driver" value="org.mariadb.jdbc.Driver"/> 
				<property name="javax.persistence.jdbc.user" value="root"/> <property name="javax.persistence.jdbc.password" 
				value="1111"/> <property name="javax.persistence.jdbc.url" value="jdbc:mariadb://localhost:3306/finall"/> 
				<property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect"/> -->

			<!-- 옵션 -->
			<!-- 콘솔에 하이버네이트가 실행하는 SQL문 출력 -->
			<property name="hibernate.show_sql" value="true" />
			<!-- SQL 출력 시 보기 쉽게 정렬 -->
			<property name="hibernate.format_sql" value="true" />
			<!-- 쿼리 출력 시 주석(comments)도 함께 출력
			즉  /* */ 이거 사이에 내용물이 들어감
			 -->
			<property name="hibernate.use_sql_comments" value="true" />
			<!-- JPA 표준에 맞춘 새로운 키 생성 전략 사용 -->
			<property name="hibernate.id.new_generator_mappings"
				value="true" />
			<!-- application 실행 시 ddl 전략 
				create : SessionFactory 시작시 스키마를 삭제하고 다시 
				생성 create-drop : SessionFactory 종료시 스키마를 삭제 
				update : SessionFactory 시작시 객체  구성와 스키마를 비교하여 컬럼 추가/삭제 작업을 진행함. 
				기존의 스키마를 삭제하지 않고 유지. validate : SessionFactory  시작시 객체구성과 스키마가 다르다면 예외 발생시 -->
			<property name="hibernate.hbm2ddl.auto" value="update" />
		

		</properties>
	</persistence-unit>
</persistence>